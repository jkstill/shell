head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2012.09.04.19.36.35;	author jkstill;	state Exp;
branches;
next	1.3;

1.3
date	2012.09.04.19.35.36;	author jkstill;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.29.00.38.23;	author jkstill;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.02.02.53.01;	author jkstill;	state Exp;
branches;
next	;


desc
@initial
@


1.4
log
@remove SCRIPTNAME from call to func - not needed
@
text
@#!/bin/bash

LOCKFILE=/tmp/testlock.lock

function script_lock  {
	typeset MY_LOCKFILE
	MY_LOCKFILE=$1
	SCRIPTNAME=$(basename $0)
	#echo SCRIPTNAME: $SCRIPTNAME
	SCRIPTPFX=$(echo $SCRIPTNAME|cut -b1)
	LB='['; RB=']'
	SCRIPTSFX=$(echo $SCRIPTNAME|cut -b2-)
	SCRIPTCHK='\['"${SCRIPTPFX}"'\]'"${SCRIPTSFX}"
	#echo SCRIPTCHK: $SCRIPTCHK

	# remove stale lockfile
	[ -r "$MY_LOCKFILE" ] && {
		PID=$(cat $MY_LOCKFILE)
		ACTIVE=$(ps --no-headers -p $PID | grep $SCRIPTNAME)
		#ACTIVE=$(ps --no-headers -p $PID )
		if [ -z "$ACTIVE" ]; then
			rm -f $MY_LOCKFILE
		fi
	}

	# set lock

	if (set -o noclobber; echo "$$" > "$MY_LOCKFILE") 2> /dev/null; then
		trap 'rm -f "$MY_LOCKFILE"; exit $?' INT TERM EXIT
		return 0
	else
		echo "Failed to acquire $LOCKFILE. Held by $(cat $LOCKFILE)"
		exit 1
	fi
}

function script_unlock {
	rm -f "$LOCKFILE"
	trap - INT TERM EXIT
}

script_lock $LOCKFILE

echo press '<ENTER>...'
read dummy 

script_unlock

@


1.3
log
@deal with the issue when another process has same PID as previous script that failed to cleanup
@
text
@d42 1
a42 1
script_lock $LOCKFILE $SCRIPTNAME
@


1.2
log
@moved exit to lock function
@
text
@d1 1
a1 1
:
d8 7
d19 2
a20 1
		ACTIVE=$(ps --no-headers -p $PID)
d42 1
a42 1
script_lock $LOCKFILE
@


1.1
log
@Initial revision
@
text
@d24 2
a25 1
		return 1
a35 7
lock_result=$?

if [ "$lock_result" -gt 0 ]; then
	echo "Failed to acquire $LOCKFILE. Held by $(cat $LOCKFILE)"
	exit 1
fi

@
