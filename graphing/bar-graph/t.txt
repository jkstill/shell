Suggestion inserted
Conversation opened. 1 unread message.

Skip to content
Using Pythian Mail with screen readers
2 of 11
A little bar graph utility
Inbox
MyInbox
Luke Davies
	
Attachments5:26 AM (2 hours ago)
	
to me, Simon, Nelson, Karunakar
Hi All

I quickly built a little graph utility in bash to chart a simple x/y graph where y is always a numerical value.

It is designed to quickly check performance stats over time and stuff like that.

I though it might be of interest as all other plotters I saw needed some sort of install and were far more complex that I needed

It is very simple and requires the input file to be already sorted by in x axis order.

Here is the example

[oracle@orabox bin]$ cat graph.txt
12:14:00 1269665
12:19:00 1129719
12:24:00 995416
12:29:00 731831
12:34:00 754405
12:39:00 1327983
12:44:00 1055422
12:49:00 2253805
12:54:00 3614224
12:59:00 3922892
13:04:00 4139174
13:09:00 3924336
13:14:00 3950089
13:19:00 3796449
13:24:00 3741579
13:29:00 3826082
13:34:00 3718282
13:39:00 3387957
13:44:00 3403865
13:49:00 3126937
13:54:00 3710977
13:59:00 3444264
14:04:00 3769970
14:09:00 3751937
14:14:00 3846941
14:19:00 2072539
14:24:00 1625004
14:29:00 1991524
14:34:00 1510858
14:39:00 1490086
14:44:00 1755564
14:49:00 1578447
14:54:00 1551199
14:59:00 1614022
15:04:00 323291
15:09:00 223026
15:14:00 223697
15:19:00 227487
15:24:00 227487
15:29:00 223696
15:34:00 660584
15:39:00 797493
15:44:00 727435
15:49:00 712867
15:54:00 544644
15:59:00 721113
16:04:00 1003888
16:09:00 559861
16:14:00 741473
16:19:00 745068
16:24:00 757142
16:29:00 759598
16:34:00 574485
16:39:00 750036
16:44:00 749512
16:49:00 844015
16:54:00 571892
16:59:00 758924
17:04:00 752005
17:09:00 782003
17:14:00 602075
17:19:00 729873
17:24:00 717877
17:29:00 717488
17:34:00 1059612
17:39:00 823891
17:44:00 844330
17:49:00 814945
17:54:00 805960
17:59:00 1388214
18:04:00 3770974
18:09:00 3800250

See that X is a time and y is a value

Passing through the utility get



I have attached the code (it's can do with some improvement - it is just basic)

Maybe you can use it to quickly chart some stuff on the command line.

Cheers
Luke
Attachments area
	
Awesome, thanks!
Got it, thanks!
Thank you!
	
	

#!/bin/bash

while getopts h:m:M: OPTION
do
    case $OPTION in
        h) height=$OPTARG;;
        m) miny=$OPTARG;;
        M) maxy=$OPTARG
           maxywidth=${#maxy};;
    esac
done

shift `expr $OPTIND - 1`

FileName=$1

# Initialise arrays
x=()
y=()

# Function 

printx () {
    current_height=$1

    n=0
    while [[ $n -lt $num ]]
    do
        yheight=$(echo "(${y[n]}-$miny)/(($maxy-$miny)/$height)" | bc -l)
        if [[ $(echo "$yheight < $current_height" | bc -l) -eq 0 ]]
        then
            printf "%s" "█"
        else
            printf "%s" " "
        fi
        ((n++))
    done
} 

# Populate array
i=0
while read xval yval
do
    x[i]="$xval"
    y[i]="$yval"
    ((i++))
done < $FileName

num=$i

# Set variables

maxxwidth=0
maxywidth=${#}
miny=${miny:=NA}
maxy=${maxy:=NA}
ylabindex=3

# Get min and max values
# For X
for xval in ${x[*]}
do
    # String length
    len=${#xval}
    if [[ $len -gt $maxxwidth ]]
    then
        maxxwidth=$len
    fi
done

# Find out how many x labels we can have
((xlabwidth=maxxwidth+2))
((numxlabs=(num-xlabwidth)/xlabwidth))

# For Y
for yval in ${y[*]}
do
    # String length
    len=${#yval}
    if [[ $len -gt $maxywidth ]]
    then
        maxywidth=$len
    fi

    # Min/Max Value
    if [[ $miny = NA ]] 
    then
        miny=$yval
    fi

    if [[ $maxy = NA ]]
    then
        maxy=$yval
    fi

    if [[ $(echo "$yval < $miny" | bc -l) -eq 1 ]]
    then
        miny=$yval
    fi

    if [[ $(echo "$yval > $maxy" | bc -l) -eq 1 ]]
    then
        maxy=$yval
    fi
done

# Now build the graph

i=${height:=30}
while [[ $i -ge 0 ]]
do  
    if [[ $i -eq $height ]]
    then
        # Top Line
        printf "%${maxywidth}.${maxywidth}s %s" $maxy "┬"
        printx $i
    elif [[ $i -gt 0 ]]
    then
        ((ymod=i%ylabindex))
        if [[ ymod -eq 0 ]]
        then
            # Print a label
            ylab=$(echo "(($maxy-$miny)/$height)*($i)" | bc -l)
            ylab=$(printf "%.0f" $ylab)
            printf "%${maxywidth}.${maxywidth}s %s" $ylab "┤"
        else
            printf "%${maxywidth}.${maxywidth}s %s" " " "│"
        fi
        printx $i
    else
        # Base Line
        printf "%${maxywidth}.${maxywidth}s %s" $miny "┼"
        if [[ $numxlabs -eq 0 ]]
        then
            ((pen=num-1))
            printf "%0.s─" $(seq 1 $pen)
        else
            xlabcount=0
            while [[ $xlabcount -lt $numxlabs ]]
            do
                ((pen=xlabwidth-1))
                printf "%0.s─" $(seq 1 $pen)
                printf "┬"
                ((xlabcount++))
            done
            ((pen=(num-1)-(xlabwidth*numxlabs)))
            printf "%0.s─" $(seq 1 $pen)
        fi
        printf "┐"
    fi

    printf "\n" 
    ((i--))
done

## Lastly Print the X axis labels
printf "%${maxywidth}.${maxywidth}s " " "
printf "%${maxxwidth}.${maxxwidth}s" ${x[0]}
if [[ $numxlabs -eq 0 ]]
then
    ((gap=num-maxxwidth))
    printf "%0.s " $(seq 1 $gap)
else
    xlabcount=0
    while [[ $xlabcount -lt $numxlabs ]]
    do
        ((xlabcount++))
        ((index=xlabcount*xlabwidth))
        printf "  %${maxxwidth}.${maxxwidth}s" ${x[index-1]}
    done
    ((gap=num-(xlabwidth*(numxlabs+1))+2))
    printf "%0.s " $(seq 1 $gap)
fi
printf "%s\n" ${x[num-1]}

exit 0

graph.txt
Displaying graph.txt.
